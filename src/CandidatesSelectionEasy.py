import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class CandidatesSelectionEasy:
	def sort(self, score, x):
		ans = []
		for c in range(ord('A'), ord('Z') + 1):
			for i, v in enumerate(score):
				if ord(v[x]) == c:
					ans.append(i)

		return ans

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str("\"") + str(p0[i]) + str("\""))
	
	sys.stdout.write(str("}") + str(",") + str(p1))
	print(str("]"))
	obj = CandidatesSelectionEasy()
	startTime = time.clock()
	answer = obj.sort(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		if (len(answer) != len(p2)):
			res = False
		else:
			for i in range(len(answer)):
				if (answer[i] != p2[i]):
					res = False
				
			
		
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			sys.stdout.write(str("\t") + str("{"))
			for i in range(len(p2)):
				if (i > 0):
					sys.stdout.write(str(","))
				
				sys.stdout.write(str(p2[i]))
			
			print(str("}"))
		
		print(str("Your answer:"))
		sys.stdout.write(str("\t") + str("{"))
		for i in range(len(answer)):
			if (i > 0):
				sys.stdout.write(str(","))
			
			sys.stdout.write(str(answer[i]))
		
		print(str("}"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = ("ACB","BAC","CBA")
p1 = 1
p2 = (1,2,0)
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = ("A","C","B","C","A")
p1 = 0
p2 = (0,4,2,1,3)
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = ("LAX","BUR","ONT","LGB","SAN","SNA","SFO","OAK","SJC")
p1 = 2
p2 = (5,3,8,7,4,6,1,2,0)
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = ("BBCBABAC","BCBACABA","CCCBAACB","CACABABB","AABBBBCC")
p1 = 6
p2 = (0,1,3,2,4)
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = ("XXYWZWWYXZ","YZZZYWYZYW","ZYZZWZYYWW","ZWZWZWZXYW","ZYXWZXWYXY","YXXXZWXWXW","XWWYZWXYXY","XYYXYWYXWY","ZZYXZYZXYY","WXZXWYZWYY")
p1 = 3
p2 = (0,3,4,5,7,8,9,6,1,2)
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = ("X",)
p1 = 0
p2 = (0,)
all_right = (disabled or KawigiEdit_RunTest(5, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!

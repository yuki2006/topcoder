import math, string, itertools, fractions, heapq, collections, re, array, bisect, random


class IncrementingSequence:
    def canItBeDone(self, k, A):
        A = sorted(A, reverse=True)
        remain = []
        table = [False] * (len(A) + 1)
        table[0] = True
        for x in A:
            if len(A) < x:
                return "IMPOSSIBLE"
            
            if not table[x]:
                table[x] = True
            else:
                remain.append(x)
        print A
        print remain
        for i, v in enumerate(table):
            if v:
                continue
            for r in remain:
                if i >= r:
                    if (i - r) % k == 0:
                        remain.remove(r)
                        break
            else:
                print i, remain, table
                return "IMPOSSIBLE"

        return "POSSIBLE"

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time


def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str("{"))
    for i in range(len(p1)):
        if (i > 0):
            sys.stdout.write(str(","))

        sys.stdout.write(str(p1[i]))

    sys.stdout.write(str("}"))
    print(str("]"))
    obj = IncrementingSequence()
    startTime = time.clock()
    answer = obj.canItBeDone(p0, p1)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        print(str("\t") + str("\"") + str(p2) + str("\""))

    print(str("Your answer:"))
    print(str("\t") + str("\"") + str(answer) + str("\""))
    if (hasAnswer):
        res = answer == p2

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res


all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = 3
p1 = (1, 2, 4, 3)
p2 = "POSSIBLE"
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = 5
p1 = (2, 2)
p2 = "IMPOSSIBLE"
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = 1
p1 = (1, 1, 1, 1, 1, 1, 1, 1)
p2 = "POSSIBLE"
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = 2
p1 = (5, 3, 3, 2, 1)
p2 = "IMPOSSIBLE"
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = 9
p1 = (1, 2, 3, 1, 4, 5, 6, 7, 9, 8)
p2 = "POSSIBLE"
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = 2
p1 = (1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2)
p2 = "POSSIBLE"
all_right = (disabled or KawigiEdit_RunTest(5, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 6 -----
disabled = False
p0 = 2
p1 = (
1, 21, 2, 23, 11, 13, 28, 24, 27, 7, 8, 22, 33, 19, 12, 26, 27, 16, 16, 31, 17, 34, 32, 10, 6, 7, 13, 23, 30, 20, 2, 3,
14, 3)
p2 = "POSSIBLE"
all_right = (disabled or KawigiEdit_RunTest(6, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 7 -----
disabled = False
p0 = 2
p1 = (22, 13, 19, 7, 2, 16, 16, 1, 10, 6, 10, 24, 15, 21, 4, 18, 10, 3, 11, 5, 20, 25, 5, 13, 25)
p2 = "IMPOSSIBLE"
all_right = (disabled or KawigiEdit_RunTest(7, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 8 -----
disabled = False
p0 = 3
p1 = (2, 3, 4, 5, 6, 7, 8, 9, 10)
p2 = "IMPOSSIBLE"
all_right = (disabled or KawigiEdit_RunTest(8, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
    if (tests_disabled):
        print(str("You're a stud (but some test cases were disabled)!"))
    else:
        print(str("You're a stud (at least on given cases)!"))

else:
    print(str("Some of the test cases had errors."))

# END KAWIGIEDIT TESTING
# Powered by KawigiEdit-pf 2.3.0!

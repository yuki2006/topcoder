class PairGameEasy:
	ABLE = "Able to generate"
	NOT_ABLE = "Not able to generate"

	def solve(self, a, b, c, d):
		while True:
			print c, d
			if (a, b) == (c, d):
				return True
			if c == d:
				return False
			if a > c or b > d:
				return False
			if c < d:
				(c, d) = (c, d - c)
			elif c > d:
				(c, d) = (c - d, d)


	def able(self, a, b, c, d):

		return self.ABLE if self.solve(a, b, c, d) else self.NOT_ABLE


# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time


def KawigiEdit_RunTest(testNum, p0, p1, p2, p3, hasAnswer, p4):
	sys.stdout.write(
		str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1) + str(",") + str(p2) + str(",") + str(
			p3))
	print(str("]"))
	obj = PairGameEasy()
	startTime = time.clock()
	answer = obj.able(p0, p1, p2, p3)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p4

	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str("\"") + str(p4) + str("\""))

		print(str("Your answer:"))
		print(str("\t") + str("\"") + str(answer) + str("\""))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))

	print(str(""))
	return res


all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = True
p0 = 1
p1 = 2
p2 = 3
p3 = 5
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = True
p0 = 1
p1 = 2
p2 = 2
p3 = 1
p4 = "Not able to generate"
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = True
p0 = 2
p1 = 2
p2 = 2
p3 = 999
p4 = "Not able to generate"
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = True
p0 = 2
p1 = 2
p2 = 2
p3 = 1000
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = True
p0 = 47
p1 = 58
p2 = 384
p3 = 221
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = True
p0 = 1000
p1 = 1000
p2 = 1000
p3 = 1000
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(5, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 6 -----
disabled = True
p0 = 1
p1 = 1
p2 = 1000
p3 = 1000
p4 = "Not able to generate"
all_right = (disabled or KawigiEdit_RunTest(6, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 7 -----
disabled = True
p0 = 1
p1 = 1
p2 = 1
p3 = 1000
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(7, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 8 -----
disabled = False
p0 = 3
p1 = 2
p2 = 19
p3 = 26
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(8, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))

else:
	print(str("Some of the test cases had errors."))

# END KAWIGIEDIT TESTING
# Powered by KawigiEdit-pf 2.3.0!

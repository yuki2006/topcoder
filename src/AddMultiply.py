import math, string, itertools, fractions, heapq, collections, re, array, bisect, random


class AddMultiply:
    def makeExpression(self, y):

        for b in xrange(-1000, 1000 + 1):
            if b == 0 or b == 1:
                continue
            for c in xrange(-1000, 1000 + 1):
                if c == 0 or c == 1:
                    continue
                if 2 * b + c == y:
                    return [2, b, c]
        return []
        # BEGIN KAWIGIEDIT TESTING

# Generated by KawigiEdit-pf 2.3.0
import sys
import time


def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0))
    print(str("]"))
    obj = AddMultiply()
    startTime = time.clock()
    answer = obj.makeExpression(p0)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        print(str("Desired answer:"))
        sys.stdout.write(str("\t") + str("{"))
        for i in range(len(p1)):
            if (i > 0):
                sys.stdout.write(str(","))

            sys.stdout.write(str(p1[i]))

        print(str("}"))

    print(str("Your answer:"))
    sys.stdout.write(str("\t") + str("{"))
    for i in range(len(answer)):
        if (i > 0):
            sys.stdout.write(str(","))

        sys.stdout.write(str(answer[i]))

    print(str("}"))
    if (hasAnswer):
        if (len(answer) != len(p1)):
            res = False
        else:
            for i in range(len(answer)):
                if (answer[i] != p1[i]):
                    res = False

    if (not res):
        print(str("DOESN'T MATCH!!!!"))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))

    print(str(""))
    return res


all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = 6
p1 = (2, 2, 2)
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = 11
p1 = (2, 3, 5)
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = 0
p1 = (7, 10, -70)
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = 500
p1 = (-400, -3, -700)
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = 2
p1 = (2, 2, -2)
all_right = (disabled or KawigiEdit_RunTest(4, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = 5
p1 = (5, 2, -5)
all_right = (disabled or KawigiEdit_RunTest(5, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
    if (tests_disabled):
        print(str("You're a stud (but some test cases were disabled)!"))
    else:
        print(str("You're a stud (at least on given cases)!"))

else:
    print(str("Some of the test cases had errors."))

# END KAWIGIEDIT TESTING
# Powered by KawigiEdit-pf 2.3.0!

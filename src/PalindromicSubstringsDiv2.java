import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class PalindromicSubstringsDiv2 {
	public int count(String[] S1, String[] S2) {
		String string = "";
		for (String s : S1) {
			string += s;
		}
		for (String s : S2) {
			string += s;
		}
		int count = 0;
		for (int i = 0; i < string.length(); i++) {
			for (int j = 1; j < string.length(); j++) {
				if (0 <= i - j && i + j < string.length()
						&& string.charAt(i - j) == string.charAt(i + j)) {
					count++;
				} else {
					break;
				}
			}
			for (int j = 0; j < string.length(); j++) {
				if (0 <= i - j && i + j + 1 < string.length()
						&& string.charAt(i - j) == string.charAt(i + j + 1)) {
					count++;
				} else {
					break;
				}
			}

		}
		return count+string.length();
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0,
			String[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		PalindromicSubstringsDiv2 obj;
		int answer;
		obj = new PalindromicSubstringsDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0
				+ " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;

		String[] p0;
		String[] p1;
		int p2;

		// ----- test 0 -----
		disabled = false;
		p0 = new String[] { "a", "a", "" };
		p1 = new String[] { "a" };
		p2 = 6;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2))
				&& all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 1 -----
		disabled = false;
		p0 = new String[] { "zaz" };
		p1 = new String[] {};
		p2 = 4;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2))
				&& all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 2 -----
		disabled = false;
		p0 = new String[] { "top" };
		p1 = new String[] { "coder" };
		p2 = 8;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2))
				&& all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 3 -----
		disabled = false;
		p0 = new String[] {};
		p1 = new String[] { "daata" };
		p2 = 7;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2))
				&& all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		if (all_right) {
			if (tests_disabled) {
				System.out
						.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

// Powered by KawigiEdit-pf 2.3.0!

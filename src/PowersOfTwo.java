import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class PowersOfTwo {
	public long count(long[] powers) {
		HashSet<Long> set = new HashSet<>();
		set.add(0L);
		for (int i = 0; i < powers.length; i++) {
			HashSet<Long> newSet = new HashSet<>();
			for (Long l : set) {
				newSet.add(l + powers[i]);
			}
			newSet.addAll(set);
			set = newSet;
		}
		return set.size();
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pf 2.3.0
	private static boolean KawigiEdit_RunTest(int testNum, long[] p0,
			boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		PowersOfTwo obj;
		long answer;
		obj = new PowersOfTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0
				+ " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		boolean disabled;
		boolean tests_disabled;
		all_right = true;
		tests_disabled = false;

		long[] p0;
		long p1;

		// ----- test 0 -----
		disabled = false;
		p0 = new long[] { 1L, 2L };
		p1 = 4L;
		all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1))
				&& all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 1 -----
		disabled = false;
		p0 = new long[] { 1L, 1L, 1L, 1L };
		p1 = 5L;
		all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1))
				&& all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 2 -----
		disabled = false;
		p0 = new long[] { 1L, 2L, 2L, 2L, 4L, 4L, 16L };
		p1 = 32L;
		all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1))
				&& all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 3 -----
		disabled = false;
		p0 = new long[] { 1L, 32L, 1L, 16L, 32L };
		p1 = 18L;
		all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1))
				&& all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		// ----- test 4 -----
		disabled = false;
		p0 = new long[] { 1048576L, 1073741824L, 549755813888L,
				70368744177664L, 4398046511104L, 262144L, 1048576L, 2097152L,
				8796093022208L, 1048576L, 1048576L, 35184372088832L, 2097152L,
				256L, 256L, 256L, 262144L, 1048576L, 1048576L, 70368744177664L,
				262144L, 1048576L };
		p1 = 18432L;
		all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1))
				&& all_right;
		tests_disabled = tests_disabled || disabled;
		// ------------------

		if (all_right) {
			if (tests_disabled) {
				System.out
						.println("You're a stud (but some test cases were disabled)!");
			} else {
				System.out.println("You're a stud (at least on given cases)!");
			}
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}

// Powered by KawigiEdit-pf 2.3.0!

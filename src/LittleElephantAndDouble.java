import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class LittleElephantAndDouble
{
	public String getAnswer(int[] A)
	{
		Arrays.sort(A);
		for (int i = 1; i < A.length; i++) {
			if (A[i] % A[0] > 0) {
				return "NO";
			}
			int num = A[i] / A[0];
			if (num == 1 || isDouble(num)) {
			} else {
				return "NO";
			}
		}
		return "YES";
	}

	boolean isDouble(int num) {
		while (num > 1) {
			if (num % 2 == 1) {
				return false;
			}
			num /= 2;
		}
		return true;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pfx 2.1.9
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		LittleElephantAndDouble obj;
		String answer;
		obj = new LittleElephantAndDouble();
		long startTime = System.currentTimeMillis();
		answer = obj.getAnswer(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int[] p0;
		String p1;

		// ----- test 0 -----
		p0 = new int[] { 1, 2 };
		p1 = "YES";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new int[] { 1, 2, 3 };
		p1 = "NO";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new int[] { 4, 8, 2, 1, 16 };
		p1 = "YES";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new int[] { 94, 752, 94, 376, 1504 };
		p1 = "YES";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new int[] { 148, 298, 1184 };
		p1 = "NO";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		// ----- test 5 -----
		p0 = new int[] { 7, 7, 7, 7 };
		p1 = "YES";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		// ----- test 5 -----
		p0 = new int[] { 2, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 , 1000000000, 1000000000, 1000000000 , 1000000000, 1000000000, 1000000000 , 1000000000, 1000000000, 1000000000 , 1000000000, 1000000000, 1000000000 , 1000000000, 1000000000, 1000000000 , 1000000000, 1000000000, 1000000000 , 1000000000, 1000000000, 1000000000  };
		p1 = "NO";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit-pfx 2.1.9!

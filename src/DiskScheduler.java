import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class DiskScheduler
{
	int func(DiskScheduler a) {
		return 0;
	}

	public int optimize(int start, int[] sectors) {
		this.func(this);
		
		List<Integer> list = new ArrayList<Integer>();

		List<Integer> list2 = new LinkedList<Integer>();

		for (int i : sectors) {
			list.add(i);
		}
		// 開始地点と同じやつがあったら消しておく
		for (int i = 0; i < list.size(); i++) {
			if (start == list.get(i)) {
				list.remove(i);
				break;
			}
		}
		// この時点で空なら0
		if (list.isEmpty()) {
			return 0;
		}
		// 最初に進むインデックスを取得する、一番近いのが２つあるかもしれないので
		int[] first = { -1, -1 };
		int minKyori = 101;
		for (int i = 0; i < list.size(); i++) {
			int target = list.get(i);
			int kyori = getKyori(start, target);
			if (minKyori > kyori) {
				minKyori = kyori;
				first[0] = i;
				first[1] = -1;
			} else if (minKyori == kyori) {
				first[1] = i;
			}
		}
		List<Integer> temp = new ArrayList<Integer>();
		for (int i : list) {
			temp.add(i);
		}
		int ans = kyori(temp, start, first[0]);
		if (first[1] >= 0) {
			ans = Math.min(ans, kyori(list, start, first[1]));
		}
		return ans;
	}

	static int kyori(List<Integer> list, int cur, int first) {
		int ans = getKyori(cur, list.get(first));
		cur = list.remove(first);
		while (list.isEmpty() == false) {
			int minKyori = 101;
			int minIndex = -1;
			for (int i = 0; i < list.size(); i++) {
				int kyori = getKyori(cur, list.get(i));
				if (minKyori > kyori) {
					minKyori = kyori;
					minIndex = i;
				}
			}
			ans += minKyori;
			cur = list.remove(minIndex);
		}
		return ans;
	}

	static int getKyori(int cur, int target) {
		if (cur >= target) {
			return Math.min(cur - target, target + 100 - cur);
		} else {
			return Math.min(target - cur, cur + 100 - target);
		}
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit-pfx 2.1.9
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		DiskScheduler obj;
		int answer;
		obj = new DiskScheduler();
		long startTime = System.currentTimeMillis();
		answer = obj.optimize(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int[] p1;
		int p2;

		// ----- test 0 -----
		p0 = 5;
		p1 = new int[] { 6, 8, 65, 71 };
		p2 = 46;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 5;
		p1 = new int[] { 55, 65, 71 };
		p2 = 50;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 20;
		p1 = new int[] { 1, 21, 99 };
		p2 = 23;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 99;
		p1 = new int[] { 55, 56, 61, 70, 76, 78, 80, 83, 84, 90, 1, 4, 6, 26, 27, 33, 38, 46, 47, 49 };
		p2 = 87;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit-pfx 2.1.9!

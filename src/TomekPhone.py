import math, string, itertools, fractions, heapq, collections, re, array, bisect, random

class TomekPhone:
    def minKeystrokes(self, frequencies, keySizes):
        MAX=100
        frequencies = list(frequencies)
        frequencies.sort(reverse=True)
        button = [1] * len(keySizes)
        sum = 0
        for freq in frequencies:
            index = button.index(min(button))
            if button[index] == MAX:
                return -1
            sum += freq * button[index]
            button[index] = button[index] + 1 if button[index] < keySizes[index] else MAX
        return sum

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = TomekPhone()
	startTime = time.clock()
	answer = obj.minKeystrokes(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str(p2))
		
		print(str("Your answer:"))
		print(str("\t") + str(answer))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (7, 3, 4, 1)
p1 = (2, 2)
p2 = 19
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, True, p2)) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (13, 7, 4, 20)
p1 = (2, 1)
p2 = -1
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, True, p2)) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (11, 23, 4, 50, 1000, 7, 18)
p1 = (3, 1, 4)
p2 = 1164
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, True, p2)) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (100, 1000, 1, 10)
p1 = (50,)
p2 = 1234
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2)) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50)
p1 = (10, 10, 10, 10, 10, 10, 10, 10)
p2 = 3353
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, True, p2)) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# END KAWIGIEDIT TESTING
# Powered by KawigiEdit-pf 2.3.0!
